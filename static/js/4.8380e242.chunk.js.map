{"version":3,"sources":["components/common/FormsControls/FormsControls.module.css","components/common/FormsControls/FormsControls.tsx","utils/validator/validator.ts","components/Profile/ProfileInfo/ProfileInfo.module.css","hoc/withAuthRedirect.tsx","components/Profile/Profile.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusHook.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileData.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddPostForm/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainerWithHooks.tsx"],"names":["module","exports","FormControl","input","meta","props","hasError","touched","error","className","s","formControl","children","Textarea","restProps","Input","createField","placeholder","name","validators","component","text","validate","required","value","maxLengthCreator","maxLength","length","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","WrappedComponent","connect","to","ProfileStatusWithHooks","status","updateStatus","useState","editMode","setEditMode","newStatus","setStatus","useEffect","onDoubleClick","autoFocus","onBlur","onChange","e","currentTarget","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","profile","onSubmit","style","formSummaryError","type","Object","keys","contacts","map","key","contact","Contact","contactTitle","contactValue","ProfileData","isOwner","goToEditMode","aboutMe","fullName","lookingForAJob","lookingForAJobDescription","onClick","ProfileInfo","imgForChange","setImgForChange","Preload","forDeactive","pic","src","descriptionBlock","title","photos","small","large","userPhoto","target","files","savePhoto","initialValues","formData","saveProfile","then","Post","message","likeCount","item","maxLength15","PostReduxForm","undefined","MyPosts","postsElements","posts","reverse","p","String","id","postBlock","addPost","MyPostsMemorized","React","memo","profilePage","action","Profile","content","MyPostsContainer","compose","withRouter","authorizedUserId","userId","getUserProfile","getStatus","match","params","history","push","console"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB,wCAAwC,QAAU,iC,oMCMvKC,EAAqC,SAAC,GAA4B,EAA3BC,MAA4B,IAArBC,EAAoB,EAApBA,KAASC,EAAW,gCAE9DC,EAAWF,EAAKG,SAAWH,EAAKI,MACtC,OACI,sBAAKC,UAAWC,IAAEC,YAAc,KAAOL,EAAWI,IAAEF,MAAQ,IAA5D,UACI,8BACKH,EAAMO,WAETN,GAAY,+BAAOF,EAAKI,YAMzBK,EAAkC,SAACR,GAAW,IAChDF,EAAuCE,EAAvCF,MAA0BW,GAAaT,EAAhCD,KAAgCC,EAA1BO,SADkC,YACRP,EADQ,8BAEtD,OAAO,cAACH,EAAD,2BAAiBG,GAAjB,aAAyB,oDAAcF,GAAWW,QAGhDC,EAA+B,SAACV,GAAW,IAC7CF,EAAuCE,EAAvCF,MAA0BW,GAAaT,EAAhCD,KAAgCC,EAA1BO,SAD+B,YACLP,EADK,8BAEnD,OAAO,cAACH,EAAD,2BAAiBG,GAAjB,aAAyB,iDAAWF,GAAWW,QAGnD,SAASE,EAAyCC,EAC7BC,EACAC,EACAC,EACAf,GACU,IAAVgB,EAAS,uDAAJ,GAC7B,OAAO,gCACH,cAAC,IAAD,aAAOJ,YAAaA,EAAaC,KAAMA,EACnCI,SAAUH,EAAYC,UAAWA,GAAef,IAFjD,IAGCgB,O,iCCpCZ,oEAAO,IAAME,EAA+B,SAACC,GACzC,IAAIA,EACJ,MAAO,qBAGEC,EAAmB,SAACC,GAAD,OAA2C,SAACF,GACxE,GAAIA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,oBCTlC1B,EAAOC,QAAU,CAAC,IAAM,yBAAyB,iBAAmB,sCAAsC,UAAY,+BAA+B,QAAU,6BAA6B,OAAS,8B,oHCKjM2B,EAA6B,SAACC,GAAD,MAA0B,CAAEC,OAAQD,EAAME,KAAKD,SAEzE,SAASE,EAAsBC,GAgBlC,OADqCC,YAAkDN,EAAlDM,EAbmB,SAAC7B,GAEzBA,EAAvByB,OAF2D,IAEjDhB,EAFgD,YAEnCT,EAFmC,YAI/D,OAAqB,IAAjBA,EAAMyB,OACC,cAAC,IAAD,CAAUK,GAAG,WAGjB,cAACF,EAAD,eAAuBnB,S,oBCjBtCd,EAAOC,QAAU,CAAC,QAAU,2B,oBCA5BD,EAAOC,QAAU,CAAC,UAAY,6B,oBCA9BD,EAAOC,QAAU,CAAC,KAAO,qB,8HCsCVmC,EApC4C,SAAC,GAA4B,IAA3BC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,aAAkB,EACrDC,oBAAS,GAD4C,mBAC9EC,EAD8E,KACpEC,EADoE,OAEtDF,mBAASF,GAF6C,mBAE9EK,EAF8E,KAEnEC,EAFmE,KAInFC,qBAAY,WACRD,EAAUN,KACX,CAACA,IAYJ,OACI,iCACMG,GACE,sBAAK/B,UAAWC,IAAE2B,OAAlB,UAA0B,4CACtB,sBAAMQ,cAfD,WACjBJ,GAAY,IAcA,SAAsCJ,GAAU,aAGvDG,GACG,8BACI,uBAAOM,WAAW,EAClBC,OAlBO,WACnBN,GAAY,GACZH,EAAaI,IAiBDM,SAfG,SAACC,GAChBN,EAAUM,EAAEC,cAAc1B,QAedA,MAAOa,U,oCCWVc,EAFkBC,YAA+C,CAACC,KAAM,gBAAtDD,EAlC0E,SAAC,GAAoC,IAAnCE,EAAkC,EAAlCA,aAAcC,EAAoB,EAApBA,QAAS/C,EAAW,EAAXA,MAElI,OAAO,uBAAMgD,SAAUF,EAAhB,UACH,8BAAK,8CACJ9C,GAAS,8BAAK,wBAAQC,UAAWgD,IAAMC,iBAAzB,SAA4ClD,MAC3D,gCACI,0CADJ,IACsBQ,YAA0C,WAAY,UAAW,GAAIH,QAE3F,gCACI,8CADJ,IAC0BG,YAA0C,YAAa,WAAY,GAAID,QAEjG,gCACI,mDADJ,IAC+BC,YAA0C,GAAI,iBAAkB,GAAID,IAAO,CAAC4C,KAAM,gBAGjH,gCACI,2CADJ,IACuB3C,YAA0C,YAAa,4BAA6B,GAAIH,QAG/G,gCACI,0CADJ,IAEI+C,OACKC,KAAKN,EAAQO,UACbC,KAAI,SAAAC,GACT,OAAO,sBAAevD,UAAWC,IAAEuD,QAA5B,UACH,8BAAID,EAAJ,OADG,IACYhD,YAAYgD,EAAK,YAAcA,EAAK,GAAIjD,KADpD,MAAUiD,eCIrBE,EAAsC,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,aAAcC,EAAmB,EAAnBA,aAC3D,OAAO,sBAAK3D,UAAWC,IAAEuD,QAAlB,UAA2B,8BAAIE,EAAJ,OAA3B,IAAmDC,MAG7CC,EApCwB,SAAC,GAAwC,IAAtCd,EAAqC,EAArCA,QAASe,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,aAC1D,OAAQ,gCAEN,gCACE,0CADF,IACoBhB,EAAQiB,WAE5B,gCACE,8CADF,IACwBjB,EAAQkB,YAEhC,gCACE,mDADF,IAC6BlB,EAAQmB,eAAiB,MAAQ,QAE7DnB,EAAQmB,gBACP,gCACE,2CADF,IACqBnB,EAAQoB,6BAG/B,gCACE,0CADF,IAEEf,OACGC,KAAKN,EAAQO,UACbC,KAAI,SAAAC,GACL,OAAO,cAAC,EAAD,CAAmBG,aAAcH,EAAKI,aAAcb,EAAQO,SAASE,IAAvDA,SAGxBM,GAAW,8BAAK,wBAAQM,QAASL,EAAjB,0B,QC0CRM,EA7DoC,SAACxE,GAAW,IAAD,EAC9BkC,oBAAS,GADqB,mBACvDC,EADuD,KAC7CC,EAD6C,OAEtBF,oBAAS,GAFa,mBAEvDuC,EAFuD,KAEzCC,EAFyC,KAI5D,IAAK1E,EAAMkD,QACT,OAAO,cAACyB,EAAA,EAAD,IAIT,IAaMC,EAAc,WAElBF,GAAgB,IAWlB,OAEE,gCACE,qBAAKtE,UAAWC,IAAEwE,IAAlB,SACE,qBAAKC,IAAI,4GAEX,sBAAK1E,UAAWC,IAAE0E,iBAAlB,UAEE,qBAAKC,MAAO,SAAUT,QA1BV,WAEhBG,GAAgB,IAwB8BI,IAAK9E,EAAMkD,QAAQ+B,OAAOC,OAASlF,EAAMkD,QAAQ+B,OAAOE,OAASC,IAAWhF,UAAWC,IAAE+E,YAElIX,GAAgB,uBAAOnB,KAAM,OAAQX,SApChB,SAACC,GAEvBA,EAAEyC,OAAOC,OAAS1C,EAAEyC,OAAOC,MAAMhE,SACnCtB,EAAMuF,UAAU3C,EAAEyC,OAAOC,MAAM,IAC/BV,QAiCG5E,EAAMiE,SAAW,cAAC,EAAD,CAAejC,OAAQhC,EAAMgC,OAAQC,aAAcjC,EAAMiC,gBACzE,qBAAK7B,UAAWC,IAAE2B,OAAlB,SAA2BhC,EAAMgC,SAGlCG,EAAW,cAAC,EAAD,CAAiBqD,cAAexF,EAAMkD,QAASA,QAASlD,EAAMkD,QAASC,SAvBxE,SAACsC,GAEhBzF,EAAM0F,YAAYD,GAAUE,MAAK,WAC/BvD,GAAY,SAqBN,cAAC,EAAD,CAAa8B,aAAc,WAAQ9B,GAAY,IAASc,QAASlD,EAAMkD,QAASe,QAASjE,EAAMiE,iB,4CC9C5F2B,EAZY,SAAC,GAAgC,IAA/B/E,EAA8B,EAA9BA,KAAMgF,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,UAExC,OACA,sBAAK1F,UAAWC,IAAE0F,KAAlB,UACI,qBAAKjB,IAAI,0GACRjE,EAFL,SAEiBgF,EACb,yCACWC,S,SCJbE,EAAc5E,YAAiB,IAaxB6E,EAAgBlD,YAA0C,CAACC,KAAK,QAAhDD,EAX4D,SAAC,GAAoB,IAAnBE,EAAkB,EAAlBA,aACvF,OACI,uBAAME,SAAUF,EAAhB,UACMtC,iBAAqCuF,EAAW,UAAW,CAAChF,IAAU8E,GAAcxF,KACtF,oDCFN2F,EAA4B,SAACnG,GAI/B,IAAIoG,EACA,YAAIpG,EAAMqG,OACTC,UACA5C,KAAK,SAAA6C,GAAC,OAAI,cAAC,EAAD,CAAiB1F,KAAM2F,OAAOD,EAAEE,IAAKX,UAAWS,EAAET,UAAWD,QAASU,EAAEV,SAA7DU,EAAEE,OAO5B,OACA,sBAAKrG,UAAWC,IAAEqG,UAAlB,UACI,0CACA,cAACT,EAAD,CAAe9C,SAPD,SAACsC,GAEfzF,EAAM2G,QAAQlB,EAASI,YAMvB,qBAAKzF,UAAWC,IAAEgG,MAAlB,SACKD,QAMEQ,EAFUC,IAAMC,KAAKX,G,gBCfpBtE,eAPM,SAACL,GACnB,MAAO,CACH6E,MAAO7E,EAAMuF,YAAYV,SAKO,CAACM,QAASK,IAAOL,SAAzC9E,CAAmDsE,GCCpDc,EAX2B,SAACjH,GAGvC,OACI,sBAAKI,UAAWC,IAAE6G,QAAlB,UACI,cAAC,EAAD,CAAahE,QAASlD,EAAMkD,QAASlB,OAAQhC,EAAMgC,OACnDC,aAAcjC,EAAMiC,aAAcgC,QAASjE,EAAMiE,QACjDsB,UAAWvF,EAAMuF,UAAWG,YAAa1F,EAAM0F,cAC/C,cAACyB,EAAD,Q,wBCgCGC,sBAEXC,IACA1F,IACAE,aAbkB,SAACL,GACnB,MAAO,CACH0B,QAAS1B,EAAMuF,YAAY7D,QAC3BlB,OAAQR,EAAMuF,YAAY/E,OAC1BsF,iBAAkB9F,EAAME,KAAK6F,UASR,CAAEC,mBAAgBC,cAAWxF,iBAAcsD,cAAWG,kBAJpE0B,EApC0E,SAACpH,GAmBtF,OAjBAuC,qBAAU,WACN,IAAIgF,GAAyBvH,EAAM0H,MAAMC,OAAOJ,OAC3CA,IACDA,EAASvH,EAAMsH,mBAEXtH,EAAM4H,QAAQC,KAAK,UAItBN,GAGLvH,EAAMwH,eAAeD,GACrBvH,EAAMyH,UAAUF,IAHZO,QAAQ3H,MAAM,iEAKnB,CAACH,EAAM0H,MAAMC,OAAOJ,SAEhB,cAAC,EAAD,2BAAavH,GAAb,IAAoBkD,QAASlD,EAAMkD,QAASwC,YAAa1F,EAAM0F,YAClE1D,OAAQhC,EAAMgC,OAAQC,aAAcjC,EAAMiC,aAC1CgC,SAAUjE,EAAM0H,MAAMC,OAAOJ,OAAQhC,UAAWvF,EAAMuF","file":"static/js/4.8380e242.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__giTc4\",\"error\":\"FormsControls_error__1mWcC\",\"formSummaryError\":\"FormsControls_formSummaryError__3YH2d\",\"captcha\":\"FormsControls_captcha__2pbjM\"};","import React, { FC} from 'react'\r\nimport { Field, WrappedFieldProps } from 'redux-form'\r\nimport { FieldValidatorType } from '../../../utils/validator/validator'\r\nimport s from './FormsControls.module.css'\r\n\r\n\r\n\r\nconst FormControl: FC<WrappedFieldProps> = ({input, meta, ...props}) => {\r\n    \r\n    const hasError = meta.touched && meta.error\r\n    return (\r\n        <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n            <div>\r\n                {props.children}\r\n            </div>\r\n            { hasError && <span>{meta.error}</span> }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport const Textarea: FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, children, ...restProps} = props\r\n    return <FormControl {...props} ><textarea {...input} {...restProps} /></FormControl> \r\n}\r\n\r\nexport const Input: FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, children, ...restProps} = props\r\n    return <FormControl {...props} ><input {...input} {...restProps} /></FormControl> \r\n}\r\n\r\nexport function createField<FormKeysType extends string>(placeholder: string | undefined,\r\n                            name: FormKeysType , \r\n                            validators: Array<FieldValidatorType>, \r\n                            component: FC<WrappedFieldProps>, \r\n                            props?: {}, \r\n                            text=\"\") {\r\n    return <div>\r\n        <Field placeholder={placeholder} name={name}\r\n            validate={validators} component={component} {...props}\r\n        /> {text}\r\n    </div>\r\n}\r\nexport type GetStringKeys<T> = Extract<keyof T, string>","import React from 'react'\r\n\r\nexport type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n    if (value) return undefined\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pic\":\"ProfileInfo_pic__2R_gh\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__13lSo\",\"userPhoto\":\"ProfileInfo_userPhoto__3HG83\",\"contact\":\"ProfileInfo_contact__3T6EH\",\"status\":\"ProfileInfo_status__19G4c\"};","\r\nimport React, { ComponentType, FC } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { AppStateType } from '../redux/redux-store'\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({ isAuth: state.auth.isAuth })\r\n\r\nexport function withAuthRedirect<WCP>(WrappedComponent: ComponentType<WCP>) {\r\n\r\n    const RedirectComponent: React.FC< MapStatePropsType> = (props) => {\r\n\r\n        let {isAuth,...restProps} = props\r\n\r\n        if (props.isAuth === false) {\r\n            return <Redirect to='/login' />\r\n        }\r\n\r\n        return <WrappedComponent  {...restProps as WCP } />\r\n\r\n\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect<MapStatePropsType, {}, WCP, AppStateType>(mapStateToPropsForRedirect)(RedirectComponent)\r\n    return ConnectedAuthRedirectComponent\r\n\r\n\r\n\r\n}\r\n\r\ntype MapStatePropsType = {isAuth: boolean}\r\n// type MapDispatchPropsType = {}\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Profile_content__ovnLD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postBlock\":\"MyPosts_postBlock__3ldwF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2QuvT\"};","import React, {useState, useEffect, ChangeEvent} from 'react'\r\nimport s from './ProfileInfo.module.css'\r\n\r\nconst ProfileStatusWithHooks: React.FC<ProfileStatusType>= ({status, updateStatus}) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [newStatus, setStatus] = useState(status)\r\n    \r\n    useEffect ( () => {\r\n        setStatus(status)\r\n    }, [status])\r\n    let activeEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    let deactiveEditMode = () => {\r\n        setEditMode(false)\r\n        updateStatus(newStatus)\r\n    }\r\n    let changeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div className={s.status}><b>my status: </b>\r\n                    <span onDoubleClick={activeEditMode}>{status || '-----'}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input autoFocus={true} \r\n                    onBlur={deactiveEditMode} \r\n                    onChange={changeStatus} \r\n                    value={status} />\r\n                </div>\r\n            }    \r\n        </div>\r\n    ) \r\n}\r\nexport default ProfileStatusWithHooks\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}","import React, { FC } from \"react\"\r\nimport { InjectedFormProps, reduxForm } from \"redux-form\"\r\nimport { createField, Input, Textarea } from \"../../common/FormsControls/FormsControls\"\r\nimport s from './ProfileInfo.module.css'\r\nimport style from '../../common/FormsControls/FormsControls.module.css'\r\nimport {ContactsType, GetFormValuesKeys, ProfileType} from '../../../type/type'\r\n\r\n\r\nconst ProfileDataForm: FC<InjectedFormProps<ProfileType, ProfileDataFormOwnType> & ProfileDataFormOwnType> = ({handleSubmit, profile, error}) => { \r\n    \r\n    return <form onSubmit={handleSubmit}>\r\n        <div><button > save </button></div>\r\n        {error && <div><button className={style.formSummaryError}>{error}</button></div>}\r\n        <div>\r\n            <b>about me:</b> {createField<ProfileDataFormValueTypeKeys>(\"about me\", \"aboutMe\", [], Textarea) }\r\n        </div>\r\n        <div>\r\n            <b>my full name:</b> {createField<ProfileDataFormValueTypeKeys>(\"full name\", \"fullName\", [], Input) }\r\n        </div>\r\n        <div>\r\n            <b>looking for a job:</b> {createField<ProfileDataFormValueTypeKeys>(\"\", \"lookingForAJob\", [], Input, {type: \"checkbox\"})}\r\n        </div>\r\n        \r\n        <div>\r\n            <b>my skills:</b> {createField<ProfileDataFormValueTypeKeys>(\"my skills\", \"lookingForAJobDescription\", [], Textarea)}\r\n        </div>\r\n        \r\n        <div>\r\n            <b>contacts:</b> {\r\n            Object\r\n                .keys(profile.contacts)\r\n                .map(key => {\r\n            return <div key={key} className={s.contact}> \r\n                <b>{key}:</b> {createField(key, \"contacts.\" + key, [], Input)} </div>})}\r\n\r\n        </div>\r\n    </form>\r\n    \r\n  }\r\n\r\n   \r\n\r\n  const ProfileDataFormReduxForm = reduxForm<ProfileType, ProfileDataFormOwnType>({form: 'edit-profile'})(ProfileDataForm)\r\n  \r\n  export default ProfileDataFormReduxForm\r\n\r\n  export type ProfileDataFormValueType = {\r\n    aboutMe: string\r\n    fullName: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    contacts: ContactsType\r\n  }\r\n  type ContactsTypeValueKeys = Extract<\"contacts.github\" | \"contacts.vk\" | \"contacts.facebook\" |\r\n                                         \"contacts.instagram\" | \"contacts.twitter\" | \"contacts.website\" |\r\n                                          \"contacts.youtube\" | \"contacts.mainLink\", string>\r\n//   type ContactsTypeValueKeys = Extract<keyof ContactsType, string>\r\n  type ProfileDataFormValueTypeKeys = GetFormValuesKeys<ProfileDataFormValueType>\r\n  export type ProfileDataFormOwnType = {\r\n      profile: ProfileType\r\n  }","import React from 'react'\r\nimport { ContactsType, ProfileType } from '../../../type/type'\r\nimport s from './ProfileInfo.module.css'\r\n\r\nconst ProfileData: React.FC<PropsType> = ({ profile, isOwner, goToEditMode }) => {\r\n    return (<div>\r\n  \r\n      <div>\r\n        <b>about me:</b> {profile.aboutMe}\r\n      </div>\r\n      <div>\r\n        <b>my full name:</b> {profile.fullName}\r\n      </div>\r\n      <div>\r\n        <b>looking for a job:</b> {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n      </div>\r\n      {profile.lookingForAJob &&\r\n        <div>\r\n          <b>my skills:</b> {profile.lookingForAJobDescription}\r\n        </div>\r\n      }\r\n      <div>\r\n        <b>contacts:</b> {\r\n        Object\r\n          .keys(profile.contacts)\r\n          .map(key => {\r\n          return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]} />\r\n        })}\r\n      </div>\r\n      {isOwner && <div><button onClick={goToEditMode}> edit </button></div>}\r\n    </div>)\r\n  \r\n  }\r\n  \r\n  \r\n  \r\n  const Contact: React.FC<ContactsPropsType>= ({ contactTitle, contactValue }) => {\r\n    return <div className={s.contact}><b>{contactTitle}:</b> {contactValue}</div>\r\n  }\r\n\r\n  export default ProfileData\r\n\r\n  type PropsType = {\r\n      profile: ProfileType \r\n      isOwner: boolean\r\n      goToEditMode: () => void\r\n      \r\n  }\r\n  type ContactsPropsType = {\r\n    contactTitle: string\r\n    contactValue: string | undefined\r\n  } \r\n  ","import React, { ChangeEvent, useState } from 'react'\r\nimport s from './ProfileInfo.module.css'\r\nimport Preloader from '../../common/Preload/Preload'\r\nimport ProfileStatus from './ProfileStatusHook'\r\nimport ProfileDataForm, {ProfileDataFormValueType, ProfileDataFormOwnType} from './ProfileDataForm'\r\nimport {ProfileComponentType} from '../../Profile/Profile'\r\nimport ProfileData from './ProfileData'\r\nimport { ProfileType } from '../../../type/type'\r\nimport userPhoto from '../../../assets/images/images.jpg'\r\n\r\nconst ProfileInfo: React.FC<ProfileComponentType>= (props) => {\r\n  let [editMode, setEditMode] = useState(false)\r\n  let [imgForChange, setImgForChange] = useState(false)\r\n\r\n  if (!props.profile) {\r\n    return <Preloader />\r\n  }\r\n\r\n\r\n  const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n    debugger\r\n    if (e.target.files && e.target.files.length) {\r\n      props.savePhoto(e.target.files[0])\r\n      forDeactive()\r\n    }\r\n\r\n  }\r\n  const forActive = () => {\r\n\r\n    setImgForChange(true)\r\n  }\r\n\r\n  const forDeactive = () => {\r\n    debugger\r\n    setImgForChange(false)\r\n  }\r\n  \r\n  const onSubmit = (formData: ProfileType) => {\r\n\r\n    props.saveProfile(formData).then(() => {\r\n      setEditMode(false)\r\n    })\r\n\r\n  }\r\n\r\n  return (\r\n\r\n    <div>\r\n      <div className={s.pic}>\r\n        <img src='https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcTD_0HFgQ9KsHOm4FF55__N9ZsFgXHXB9JxDg&usqp=CAU' />\r\n      </div>\r\n      <div className={s.descriptionBlock}>\r\n\r\n        <img title={'change'} onClick={forActive} src={props.profile.photos.small || props.profile.photos.large || userPhoto} className={s.userPhoto} />\r\n\r\n        {imgForChange && <input type={'file'} onChange={onMainPhotoSelected} />}\r\n        {props.isOwner && <ProfileStatus status={props.status} updateStatus={props.updateStatus} /> ||\r\n          <div className={s.status}>{props.status}</div>}\r\n\r\n\r\n        {editMode ? <ProfileDataForm initialValues={props.profile} profile={props.profile} onSubmit={onSubmit} />\r\n          : <ProfileData goToEditMode={() => { setEditMode(true) }} profile={props.profile} isOwner={props.isOwner} />}\r\n\r\n\r\n      </div>\r\n\r\n\r\n    </div>)\r\n}\r\n\r\n\r\nexport default ProfileInfo","import React, { FC } from 'react'\r\nimport s from './Post.module.css'\r\n\r\nconst Post: FC<PostType> = ({name, message, likeCount}) => {\r\n    \r\n    return (\r\n    <div className={s.item}>\r\n        <img src='https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcRMx6nyE6BtBUpxyikA6w1afyKRpCc1M38QrA&usqp=CAU'/>\r\n        {name}:____ {message}\r\n        <div>\r\n            -like-{likeCount}\r\n        </div>\r\n    </div>)\r\n}\r\n\r\nexport default Post\r\ntype PostType = {\r\n    name: string\r\n    message: string\r\n    likeCount: number\r\n}","import React from 'react'\r\nimport { InjectedFormProps, reduxForm } from \"redux-form\"\r\nimport { maxLengthCreator, required } from \"../../../../utils/validator/validator\"\r\nimport { createField, Textarea } from \"../../../common/FormsControls/FormsControls\"\r\n\r\n\r\nconst maxLength15 = maxLengthCreator(15)\r\n\r\nconst PostForm: React.FC<InjectedFormProps<MyPostFormValueType, PropsType> & PropsType>= ({handleSubmit}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>                       \r\n            { createField<MyPostFormValueTypeKeys>(undefined, 'message', [required, maxLength15], Textarea) }           \r\n            <button >add post</button>\r\n            \r\n        \r\n        </form>\r\n    )\r\n}\r\n\r\nexport const PostReduxForm = reduxForm<MyPostFormValueType, PropsType>({form:'post'})(PostForm)\r\n\r\nexport type MyPostFormValueType = {\r\n    message: string\r\n}\r\ntype MyPostFormValueTypeKeys = Extract<keyof MyPostFormValueType, string>\r\ntype PropsType = {}","import React, { FC } from 'react'\r\nimport s from './MyPosts.module.css'\r\nimport Post from './Post/Post'\r\nimport { MapDispatchPropsType, MapStatePropsType } from './MyPostsContainer'\r\nimport { MyPostFormValueType, PostReduxForm } from './AddPostForm/AddPostForm'\r\n\r\n\r\n\r\n\r\n\r\nconst MyPosts: FC<MyPostType > =  (props) => {\r\n    \r\n    \r\n\r\n    let postsElements = \r\n        [...props.posts]\r\n        .reverse()\r\n        .map( p => <Post key={p.id} name={String(p.id)} likeCount={p.likeCount} message={p.message} />)\r\n    \r\n    // let newPostElement = React.createRef //???\r\n    const onAddPost = (formData:MyPostFormValueType) => {\r\n        \r\n        props.addPost(formData.message)\r\n    }\r\n    return (\r\n    <div className={s.postBlock}>\r\n        <h3>My posts</h3>\r\n        <PostReduxForm onSubmit={onAddPost} />\r\n        <div className={s.posts}>\r\n            {postsElements}  \r\n        </div>\r\n     </div>)\r\n}\r\nconst MyPostsMemorized = React.memo(MyPosts)\r\n\r\nexport default MyPostsMemorized\r\n\r\n\r\n\r\ntype MyPostType = MapStatePropsType & MapDispatchPropsType \r\n// type MyPostOwnType = {\r\n//     onSubmit: (formData: MyPostFormValueType) => void\r\n// }","import React from 'react'\r\n\r\n\r\nimport MyPosts from './MyPosts'\r\nimport { connect } from 'react-redux'\r\nimport { action } from '../../../redux/profile-reducer'\r\nimport { PostType } from '../../../type/type'\r\nimport { Action } from 'redux'\r\nimport { AppStateType } from '../../../redux/redux-store'\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        // value: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nexport default  connect(mapStateToProps,{addPost: action.addPost})(MyPosts)\r\n\r\nexport type MapStatePropsType = {\r\n    posts: Array<PostType>\r\n}\r\nexport type MapDispatchPropsType = {\r\n    addPost: (message: string) => Action\r\n}","import React, { FC } from 'react'\r\nimport s from './Profile.module.css'\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo'\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer'\r\nimport { ProfileType } from '../../type/type'\r\n\r\n\r\n\r\nconst Profile: FC<ProfileComponentType> = (props) => {\r\n    \r\n    \r\n    return (\r\n        <div className={s.content}>\r\n            <ProfileInfo profile={props.profile} status={props.status} \r\n            updateStatus={props.updateStatus} isOwner={props.isOwner} \r\n            savePhoto={props.savePhoto} saveProfile={props.saveProfile} />\r\n            <MyPostsContainer  />\r\n        </div>)\r\n}\r\nexport default Profile\r\n\r\nexport type ProfileComponentType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n    isOwner: boolean\r\n    // userPhoto: string\r\n}","import React, { ChangeEvent, ComponentType, FC, PropsWithChildren, useEffect } from 'react'\r\nimport Profile from './Profile'\r\nimport { connect } from 'react-redux'\r\nimport { getUserProfile, getStatus, updateStatus, savePhoto, saveProfile } from '../../redux/profile-reducer'\r\nimport { RouteComponentProps, withRouter } from 'react-router-dom'\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect'\r\nimport { compose } from 'redux'\r\nimport { ProfileType } from '../../type/type'\r\nimport { AppStateType } from '../../redux/redux-store'\r\n\r\n\r\n\r\nconst ProfileContainer: FC<ProfileContainerType & RouteComponentProps<PathParamsType>> = (props) => {\r\n    \r\n    useEffect(() => {\r\n        let userId: number | null = +props.match.params.userId\r\n        if (!userId) {\r\n            userId = props.authorizedUserId\r\n            if (!userId) {\r\n                props.history.push('/login')\r\n            }\r\n        }\r\n\r\n        if (!userId) {\r\n            console.error('Id should exists in URL param or in state(authorizedUserId)')\r\n        } else {\r\n        props.getUserProfile(userId)\r\n        props.getStatus(userId)\r\n        }\r\n    }, [props.match.params.userId])\r\n\r\n    return <Profile {...props} profile={props.profile} saveProfile={props.saveProfile}\r\n        status={props.status} updateStatus={props.updateStatus}\r\n        isOwner={!props.match.params.userId} savePhoto={props.savePhoto} />\r\n}\r\n\r\n\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.userId,\r\n\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n\r\n    withRouter,\r\n    withAuthRedirect,\r\n    connect(mapStateToProps, { getUserProfile, getStatus, updateStatus, savePhoto, saveProfile })\r\n)\r\n    (ProfileContainer)\r\n\r\n\r\ntype MapStatePropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    authorizedUserId: number | null\r\n}\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\ntype ProfileOwnPropsType = {\r\n    // userPhoto: string\r\n\r\n}\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype ProfileContainerType = MapStatePropsType & MapDispatchPropsType & ProfileOwnPropsType \r\n"],"sourceRoot":""}