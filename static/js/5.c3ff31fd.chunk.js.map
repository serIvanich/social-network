{"version":3,"sources":["components/common/FormsControls/FormsControls.module.css","components/common/FormsControls/FormsControls.tsx","utils/validator/validator.ts","components/Dialogs/Dialogs.module.css","hoc/withAuthRedirect.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogsForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","FormControl","input","meta","props","hasError","touched","error","className","s","formControl","children","Textarea","restProps","Input","createField","placeholder","name","validators","component","text","validate","required","value","maxLengthCreator","maxLength","length","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","WrappedComponent","connect","to","DialogItem","path","id","dialog","activeClassName","active","src","Message","message","maxLength30","DialogsReduxForm","reduxForm","form","onSubmit","handleSubmit","Dialogs","dialogsElement","dialogs","map","d","myMessagesElement","myMessages","m","yourMessagesElement","friendsMessages","dialogsItem","messages","sendMessage","newMessage","compose","dialogsPage","newMessageBody","action"],"mappings":"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","file":"static/js/5.c3ff31fd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__1Px8x\",\"error\":\"FormsControls_error__2dzJ9\",\"formSummaryError\":\"FormsControls_formSummaryError__2pFC1\",\"captcha\":\"FormsControls_captcha__j12X_\"};","import React, { FC} from 'react'\r\nimport { Field, WrappedFieldProps } from 'redux-form'\r\nimport { FieldValidatorType } from '../../../utils/validator/validator'\r\nimport s from './FormsControls.module.css'\r\n\r\n\r\n\r\nconst FormControl: FC<WrappedFieldProps> = ({input, meta, ...props}) => {\r\n    \r\n    const hasError = meta.touched && meta.error\r\n    return (\r\n        <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n            <div>\r\n                {props.children}\r\n            </div>\r\n            { hasError && <span>{meta.error}</span> }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport const Textarea: FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, children, ...restProps} = props\r\n    return <FormControl {...props} ><textarea {...input} {...restProps} /></FormControl> \r\n}\r\n\r\nexport const Input: FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, children, ...restProps} = props\r\n    return <FormControl {...props} ><input {...input} {...restProps} /></FormControl> \r\n}\r\n\r\nexport function createField<FormKeysType extends string>(placeholder: string | undefined,\r\n                            name: FormKeysType , \r\n                            validators: Array<FieldValidatorType>, \r\n                            component: FC<WrappedFieldProps>, \r\n                            props?: {}, \r\n                            text=\"\") {\r\n    return <div>\r\n        <Field placeholder={placeholder} name={name}\r\n            validate={validators} component={component} {...props}\r\n        /> {text}\r\n    </div>\r\n}\r\nexport type GetStringKeys<T> = Extract<keyof T, string>","import React from 'react'\r\n\r\nexport type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n    if (value) return undefined\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2tfwq\",\"dialogsItem\":\"Dialogs_dialogsItem__3XXR4\",\"dialog\":\"Dialogs_dialog__2066d\",\"active\":\"Dialogs_active__22mwi\",\"messages\":\"Dialogs_messages__2GgNH\",\"message\":\"Dialogs_message__3rjD7\"};","\r\nimport React, { ComponentType, FC } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { AppStateType } from '../redux/redux-store'\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({ isAuth: state.auth.isAuth })\r\n\r\nexport function withAuthRedirect<WCP>(WrappedComponent: ComponentType<WCP>) {\r\n\r\n    const RedirectComponent: React.FC< MapStatePropsType> = (props) => {\r\n\r\n        let {isAuth,...restProps} = props\r\n\r\n        if (props.isAuth === false) {\r\n            return <Redirect to='/login' />\r\n        }\r\n\r\n        return <WrappedComponent  {...restProps as WCP } />\r\n\r\n\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect<MapStatePropsType, {}, WCP, AppStateType>(mapStateToPropsForRedirect)(RedirectComponent)\r\n    return ConnectedAuthRedirectComponent\r\n\r\n\r\n\r\n}\r\n\r\ntype MapStatePropsType = {isAuth: boolean}\r\n// type MapDispatchPropsType = {}\r\n\r\n","import React, { FC } from 'react'\r\nimport s from './../Dialogs.module.css'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\ntype PropsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nconst DialogItem: FC<PropsType> = (props) => {\r\n    let path = `/dialogs/${props.id}`\r\n    return (\r\n        <div className={s.dialog}>\r\n           \r\n            <NavLink to={path} activeClassName={s.active}>\r\n                <img src='https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcRMx6nyE6BtBUpxyikA6w1afyKRpCc1M38QrA&usqp=CAU'/>\r\n                {props.name}\r\n            </NavLink>\r\n        </div>  \r\n    )\r\n}\r\nexport default DialogItem","import React, { FC } from 'react'\r\nimport s from './../Dialogs.module.css'\r\n\r\ntype PropsType = {\r\n    message: string\r\n}\r\n\r\nconst Message: FC<PropsType> = (props) => {\r\n    return <div className={s.message}><img src='https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcRMx6nyE6BtBUpxyikA6w1afyKRpCc1M38QrA&usqp=CAU'/>-{props.message}</div>\r\n}\r\nexport default Message","import  React, { FC } from 'react'\r\nimport { InjectedFormProps, reduxForm } from 'redux-form'\r\nimport { maxLengthCreator, required } from '../../utils/validator/validator'\r\nimport { createField, Textarea } from '../common/FormsControls/FormsControls'\r\nimport { NewMessageFormValueType } from './Dialogs'\r\n\r\nconst maxLength30 = maxLengthCreator(30)\r\n\r\n\r\nconst DialogsForm: FC<InjectedFormProps<NewMessageFormValueType, PropsType> & PropsType>  = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            {createField<NewMessageFormValueTypeKeys>('enter you message', 'newMessage', [required, maxLength30], Textarea )}\r\n            \r\n            <button >new post</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const DialogsReduxForm = reduxForm<NewMessageFormValueType & PropsType> ({form: 'dialogsMessage'})(DialogsForm)\r\n\r\ntype NewMessageFormValueTypeKeys = Extract<keyof NewMessageFormValueType, string>\r\ntype PropsType = {}","import React, { FC } from 'react'\r\nimport s from './Dialogs.module.css'\r\nimport DialogItem from './DialogItem/DialogItem'\r\nimport Message from './Message/Message'\r\nimport { InitialStateType } from '../../redux/dialogs-reducer'\r\nimport { DialogsReduxForm } from './DialogsForm'\r\n\r\n\r\n\r\n\r\n\r\nconst Dialogs: FC<DialogsPropsType> = (props) => {\r\n    \r\n    \r\n    let dialogsElement = props.dialogs.map( d => <DialogItem name={d.name} key={d.id} id={d.id} />)\r\n\r\n    let myMessagesElement = props.myMessages.map( m => <Message message={m.message}  key={m.id} />)\r\n\r\n    let yourMessagesElement = props.friendsMessages.map( m => <Message message={m.message}  key={m.id} />)\r\n\r\n       \r\n    const addNewMessage = (value:NewMessageFormValueType) => {\r\n        props.sendMessage(value.newMessage)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItem}>\r\n            \r\n                {dialogsElement}\r\n               \r\n            </div>\r\n            <div className={s.messages}>\r\n                {myMessagesElement}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {yourMessagesElement}\r\n            </div>\r\n            <DialogsReduxForm onSubmit={addNewMessage} />\r\n        </div>\r\n    )\r\n}\r\nexport default Dialogs\r\n\r\nexport type NewMessageFormValueType = {newMessage: string}\r\n\r\nexport type DialogsPropsType = InitialStateType & {sendMessage: (textMessage: string) => void}","import React, { ComponentType } from 'react'\r\nimport { action, InitialStateType } from '../../redux/dialogs-reducer'\r\nimport Dialogs from './Dialogs'\r\nimport { connect } from 'react-redux'\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect'\r\nimport { compose } from 'redux'\r\nimport { AppStateType } from '../../redux/redux-store'\r\n\r\n\r\n\r\n\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        dialogs: state.dialogsPage.dialogs,\r\n        myMessages: state.dialogsPage.myMessages,\r\n        friendsMessages: state.dialogsPage.friendsMessages,\r\n        newMessageBody: state.dialogsPage.newMessageBody\r\n    }\r\n}\r\n\r\n// type MapStatePropsType = {\r\n//     dialogs: Array<DialogType>\r\n//     myMessages: Array<MessageType>\r\n//     friendsMessages: Array<MessageType>\r\n//     newMessageBody?: string\r\n    \r\n// }\r\n\r\ntype MapStatePropsType = InitialStateType\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {sendMessage: action.sendMessage}),\r\n    withAuthRedirect \r\n)(Dialogs)\r\n// let DialogsAuthRedirectComponent = withAuthRedirect(Dialogs)\r\n// export const DialogsContainer = connect<MapStatePropsType, MapDispatchPropsType, AppStateType>(mapStateToProps, {sendMessage}) (DialogsAuthRedirectComponent)\r\n\r\n// export default compose(\r\n//     connect(mapStateToProps, {sendMessage}),\r\n//     withAuthRedirect)\r\n// (Dialogs)"],"sourceRoot":""}