{"version":3,"sources":["components/Dialogs/Dialogs.module.css","hoc/withAuthRedirect.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogsForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","WrappedComponent","connect","props","restProps","to","DialogItem","path","id","className","s","dialog","activeClassName","active","src","name","Message","message","maxLength30","maxLengthCreator","DialogsReduxForm","reduxForm","form","onSubmit","handleSubmit","createField","required","Textarea","Dialogs","dialogsElement","dialogs","map","d","myMessagesElement","myMessages","m","yourMessagesElement","friendsMessages","dialogsItem","messages","value","sendMessage","newMessage","compose","dialogsPage","newMessageBody","action"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,YAAc,6BAA6B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,oHCK7MC,EAA6B,SAACC,GAAD,MAA0B,CAAEC,OAAQD,EAAME,KAAKD,SAEzE,SAASE,EAAsBC,GAgBlC,OADqCC,YAAkDN,EAAlDM,EAbmB,SAACC,GAEzBA,EAAvBL,OAF2D,IAEjDM,EAFgD,YAEnCD,EAFmC,YAI/D,OAAqB,IAAjBA,EAAML,OACC,cAAC,IAAD,CAAUO,GAAG,WAGjB,cAACJ,EAAD,eAAuBG,S,6FCGvBE,EAZmB,SAACH,GAC/B,IAAII,EAAI,mBAAeJ,EAAMK,IAC7B,OACI,qBAAKC,UAAWC,IAAEC,OAAlB,SAEI,eAAC,IAAD,CAASN,GAAIE,EAAMK,gBAAiBF,IAAEG,OAAtC,UACI,qBAAKC,IAAI,0GACRX,EAAMY,WCNRC,EAHgB,SAACb,GAC5B,OAAO,sBAAKM,UAAWC,IAAEO,QAAlB,UAA2B,qBAAKH,IAAI,0GAApC,IAA+IX,EAAMc,Y,yBCF1JC,EAAcC,YAAiB,IAaxBC,EAAmBC,YAAgD,CAACC,KAAM,kBAAvDD,EAV4D,SAAClB,GACzF,OACI,uBAAMoB,SAAUpB,EAAMqB,aAAtB,UACKC,YAAyC,oBAAqB,aAAc,CAACC,IAAUR,GAAcS,KAEtG,oDC4BGC,EA/BuB,SAACzB,GAGnC,IAAI0B,EAAiB1B,EAAM2B,QAAQC,KAAK,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAYjB,KAAMiB,EAAEjB,KAAiBP,GAAIwB,EAAExB,IAAZwB,EAAExB,OAE1EyB,EAAoB9B,EAAM+B,WAAWH,KAAK,SAAAI,GAAC,OAAI,cAAC,EAAD,CAASlB,QAASkB,EAAElB,SAAekB,EAAE3B,OAEpF4B,EAAsBjC,EAAMkC,gBAAgBN,KAAK,SAAAI,GAAC,OAAI,cAAC,EAAD,CAASlB,QAASkB,EAAElB,SAAekB,EAAE3B,OAO/F,OACI,sBAAKC,UAAWC,IAAEoB,QAAlB,UACI,qBAAKrB,UAAWC,IAAE4B,YAAlB,SAEKT,IAGL,qBAAKpB,UAAWC,IAAE6B,SAAlB,SACKN,IAEL,qBAAKxB,UAAWC,IAAE6B,SAAlB,SACKH,IAEL,cAAChB,EAAD,CAAkBG,SAjBJ,SAACiB,GACnBrC,EAAMsC,YAAYD,EAAME,mB,yBCUjBC,sBACXzC,aApBkB,SAACL,GACnB,MAAO,CACHiC,QAASjC,EAAM+C,YAAYd,QAC3BI,WAAYrC,EAAM+C,YAAYV,WAC9BG,gBAAiBxC,EAAM+C,YAAYP,gBACnCQ,eAAgBhD,EAAM+C,YAAYC,kBAeb,CAACJ,YAAaK,IAAOL,cAC9CzC,IAFW2C,CAGbf","file":"static/js/4.56b5dcc8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__21pd8\",\"dialogsItem\":\"Dialogs_dialogsItem__1-lZl\",\"dialog\":\"Dialogs_dialog__2-ecw\",\"active\":\"Dialogs_active__CTTdM\",\"messages\":\"Dialogs_messages__cLrBI\",\"message\":\"Dialogs_message__2P9f_\"};","\r\nimport React, { ComponentType, FC } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { AppStateType } from '../redux/redux-store'\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({ isAuth: state.auth.isAuth })\r\n\r\nexport function withAuthRedirect<WCP>(WrappedComponent: ComponentType<WCP>) {\r\n\r\n    const RedirectComponent: React.FC< MapStatePropsType> = (props) => {\r\n\r\n        let {isAuth,...restProps} = props\r\n\r\n        if (props.isAuth === false) {\r\n            return <Redirect to='/login' />\r\n        }\r\n\r\n        return <WrappedComponent  {...restProps as WCP } />\r\n\r\n\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect<MapStatePropsType, {}, WCP, AppStateType>(mapStateToPropsForRedirect)(RedirectComponent)\r\n    return ConnectedAuthRedirectComponent\r\n\r\n\r\n\r\n}\r\n\r\ntype MapStatePropsType = {isAuth: boolean}\r\n// type MapDispatchPropsType = {}\r\n\r\n","import React, { FC } from 'react'\r\nimport s from './../Dialogs.module.css'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\ntype PropsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nconst DialogItem: FC<PropsType> = (props) => {\r\n    let path = `/dialogs/${props.id}`\r\n    return (\r\n        <div className={s.dialog}>\r\n           \r\n            <NavLink to={path} activeClassName={s.active}>\r\n                <img src='https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcRMx6nyE6BtBUpxyikA6w1afyKRpCc1M38QrA&usqp=CAU'/>\r\n                {props.name}\r\n            </NavLink>\r\n        </div>  \r\n    )\r\n}\r\nexport default DialogItem","import React, { FC } from 'react'\r\nimport s from './../Dialogs.module.css'\r\n\r\ntype PropsType = {\r\n    message: string\r\n}\r\n\r\nconst Message: FC<PropsType> = (props) => {\r\n    return <div className={s.message}><img src='https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcRMx6nyE6BtBUpxyikA6w1afyKRpCc1M38QrA&usqp=CAU'/>-{props.message}</div>\r\n}\r\nexport default Message","import  React, { FC } from 'react'\r\nimport { InjectedFormProps, reduxForm } from 'redux-form'\r\nimport { maxLengthCreator, required } from '../../utils/validator/validator'\r\nimport { createField, Textarea } from '../common/FormsControls/FormsControls'\r\nimport { NewMessageFormValueType } from './Dialogs'\r\n\r\nconst maxLength30 = maxLengthCreator(30)\r\n\r\n\r\nconst DialogsForm: FC<InjectedFormProps<NewMessageFormValueType, PropsType> & PropsType>  = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            {createField<NewMessageFormValueTypeKeys>('enter you message', 'newMessage', [required, maxLength30], Textarea )}\r\n            \r\n            <button >new post</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const DialogsReduxForm = reduxForm<NewMessageFormValueType & PropsType> ({form: 'dialogsMessage'})(DialogsForm)\r\n\r\ntype NewMessageFormValueTypeKeys = Extract<keyof NewMessageFormValueType, string>\r\ntype PropsType = {}","import React, { FC } from 'react'\r\nimport s from './Dialogs.module.css'\r\nimport DialogItem from './DialogItem/DialogItem'\r\nimport Message from './Message/Message'\r\nimport { InitialStateType } from '../../redux/dialogs-reducer'\r\nimport { DialogsReduxForm } from './DialogsForm'\r\n\r\n\r\n\r\n\r\n\r\nconst Dialogs: FC<DialogsPropsType> = (props) => {\r\n    \r\n    \r\n    let dialogsElement = props.dialogs.map( d => <DialogItem name={d.name} key={d.id} id={d.id} />)\r\n\r\n    let myMessagesElement = props.myMessages.map( m => <Message message={m.message}  key={m.id} />)\r\n\r\n    let yourMessagesElement = props.friendsMessages.map( m => <Message message={m.message}  key={m.id} />)\r\n\r\n       \r\n    const addNewMessage = (value:NewMessageFormValueType) => {\r\n        props.sendMessage(value.newMessage)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItem}>\r\n            \r\n                {dialogsElement}\r\n               \r\n            </div>\r\n            <div className={s.messages}>\r\n                {myMessagesElement}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {yourMessagesElement}\r\n            </div>\r\n            <DialogsReduxForm onSubmit={addNewMessage} />\r\n        </div>\r\n    )\r\n}\r\nexport default Dialogs\r\n\r\nexport type NewMessageFormValueType = {newMessage: string}\r\n\r\nexport type DialogsPropsType = InitialStateType & {sendMessage: (textMessage: string) => void}","import React, { ComponentType } from 'react'\r\nimport { action, InitialStateType } from '../../redux/dialogs-reducer'\r\nimport Dialogs from './Dialogs'\r\nimport { connect } from 'react-redux'\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect'\r\nimport { compose } from 'redux'\r\nimport { AppStateType } from '../../redux/redux-store'\r\n\r\n\r\n\r\n\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        dialogs: state.dialogsPage.dialogs,\r\n        myMessages: state.dialogsPage.myMessages,\r\n        friendsMessages: state.dialogsPage.friendsMessages,\r\n        newMessageBody: state.dialogsPage.newMessageBody\r\n    }\r\n}\r\n\r\n// type MapStatePropsType = {\r\n//     dialogs: Array<DialogType>\r\n//     myMessages: Array<MessageType>\r\n//     friendsMessages: Array<MessageType>\r\n//     newMessageBody?: string\r\n    \r\n// }\r\n\r\ntype MapStatePropsType = InitialStateType\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {sendMessage: action.sendMessage}),\r\n    withAuthRedirect \r\n)(Dialogs)\r\n// let DialogsAuthRedirectComponent = withAuthRedirect(Dialogs)\r\n// export const DialogsContainer = connect<MapStatePropsType, MapDispatchPropsType, AppStateType>(mapStateToProps, {sendMessage}) (DialogsAuthRedirectComponent)\r\n\r\n// export default compose(\r\n//     connect(mapStateToProps, {sendMessage}),\r\n//     withAuthRedirect)\r\n// (Dialogs)"],"sourceRoot":""}