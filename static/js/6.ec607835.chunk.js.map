{"version":3,"sources":["components/common/FormsControls/FormsControls.module.css","components/common/FormsControls/FormsControls.tsx","utils/validator/validator.ts","components/Login/LoginForm.tsx","components/Login/Login.tsx"],"names":["module","exports","FormControl","input","meta","props","hasError","touched","error","className","s","formControl","children","Textarea","restProps","Input","createField","placeholder","name","validators","component","text","validate","required","value","maxLengthCreator","maxLength","length","maxLength30","LoginReduxForm","reduxForm","form","handleSubmit","captchaUrl","captcha","undefined","onSubmit","type","src","formSummaryError","Login","isAuth","useSelector","state","auth","dispatch","useDispatch","login","email","password","rememberMe","to","loginData","getCaptchaUrl"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB,wCAAwC,QAAU,iC,oMCMvKC,EAAqC,SAAC,GAA4B,EAA3BC,MAA4B,IAArBC,EAAoB,EAApBA,KAASC,EAAW,gCAE9DC,EAAWF,EAAKG,SAAWH,EAAKI,MACtC,OACI,sBAAKC,UAAWC,IAAEC,YAAc,KAAOL,EAAWI,IAAEF,MAAQ,IAA5D,UACI,8BACKH,EAAMO,WAETN,GAAY,+BAAOF,EAAKI,YAMzBK,EAAkC,SAACR,GAAW,IAChDF,EAAuCE,EAAvCF,MAA0BW,GAAaT,EAAhCD,KAAgCC,EAA1BO,SADkC,YACRP,EADQ,8BAEtD,OAAO,cAACH,EAAD,2BAAiBG,GAAjB,aAAyB,oDAAcF,GAAWW,QAGhDC,EAA+B,SAACV,GAAW,IAC7CF,EAAuCE,EAAvCF,MAA0BW,GAAaT,EAAhCD,KAAgCC,EAA1BO,SAD+B,YACLP,EADK,8BAEnD,OAAO,cAACH,EAAD,2BAAiBG,GAAjB,aAAyB,iDAAWF,GAAWW,QAGnD,SAASE,EAAyCC,EAC7BC,EACAC,EACAC,EACAf,GACU,IAAVgB,EAAS,uDAAJ,GAC7B,OAAO,gCACH,cAAC,IAAD,aAAOJ,YAAaA,EAAaC,KAAMA,EACnCI,SAAUH,EAAYC,UAAWA,GAAef,IAFjD,IAGCgB,O,iCCpCZ,oEAAO,IAAME,EAA+B,SAACC,GACzC,IAAIA,EACJ,MAAO,qBAGEC,EAAmB,SAACC,GAAD,OAA2C,SAACF,GACxE,GAAIA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,oHCJ5BE,EAAcH,YAAiB,IA6BxBI,EAAiBC,YAAgD,CAAEC,KAAM,SAAxDD,EA3BmF,SAAC,GAAkD,IAAhDE,EAA+C,EAA/CA,aAAcxB,EAAiC,EAAjCA,MAAOyB,EAA0B,EAA1BA,WAAYC,EAAc,EAAdA,QAIjJ,YAHmBC,IAAfF,GACAC,IAIA,uBAAME,SAAUJ,EAAhB,UAEKhB,YAAoC,QAAS,QAAS,CAACO,KAAWR,KAElEC,YAAoC,WAAY,WAAY,CAACO,IAAUK,GAAcb,IAAO,CAAEsB,KAAM,aAEpGrB,iBAAoCmB,EAAW,aAAc,GAAIpB,IAAO,CAAEsB,KAAM,YAAc,eAE9F,qBAAK5B,UAAWC,IAAEwB,QAASI,IAAKL,IAChCA,GAAcjB,YAAoC,iBAAkB,UAAW,CAACO,KAAWR,KAE3FP,GAAS,qBAAKC,UAAWC,IAAE6B,iBAAlB,SACL/B,IAEL,8BACI,mDCMDgC,UA1BmB,WAE9B,IAAMC,EAASC,aAAY,SAACC,GAAD,OAAgBA,EAAMC,KAAKH,UAChDR,EAAaS,aAAY,SAACC,GAAD,OAAgBA,EAAMC,KAAKX,cACpDY,EAAWC,cACXC,EAAQ,SAARA,EAASC,EAAeC,EAAkBC,EAAqBhB,GACjEW,EAASE,EAAMC,EAAOC,EAAUC,EAAYhB,KAShD,OAAIO,EACO,cAAC,IAAD,CAAUU,GAAI,aAElB,gCAEH,uCACA,cAACtB,EAAD,CAAgBO,SAVJ,SAACgB,GACbL,EAAMK,EAAUJ,MAAOI,EAAUH,SAAUG,EAAUF,WAAYE,EAAUlB,UASxCD,WAAYA,EAAYC,QAbzC,SAAhBmB,IACFR,EAASQ","file":"static/js/6.ec607835.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__giTc4\",\"error\":\"FormsControls_error__1mWcC\",\"formSummaryError\":\"FormsControls_formSummaryError__3YH2d\",\"captcha\":\"FormsControls_captcha__2pbjM\"};","import React, { FC} from 'react'\r\nimport { Field, WrappedFieldProps } from 'redux-form'\r\nimport { FieldValidatorType } from '../../../utils/validator/validator'\r\nimport s from './FormsControls.module.css'\r\n\r\n\r\n\r\nconst FormControl: FC<WrappedFieldProps> = ({input, meta, ...props}) => {\r\n    \r\n    const hasError = meta.touched && meta.error\r\n    return (\r\n        <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n            <div>\r\n                {props.children}\r\n            </div>\r\n            { hasError && <span>{meta.error}</span> }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport const Textarea: FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, children, ...restProps} = props\r\n    return <FormControl {...props} ><textarea {...input} {...restProps} /></FormControl> \r\n}\r\n\r\nexport const Input: FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, children, ...restProps} = props\r\n    return <FormControl {...props} ><input {...input} {...restProps} /></FormControl> \r\n}\r\n\r\nexport function createField<FormKeysType extends string>(placeholder: string | undefined,\r\n                            name: FormKeysType , \r\n                            validators: Array<FieldValidatorType>, \r\n                            component: FC<WrappedFieldProps>, \r\n                            props?: {}, \r\n                            text=\"\") {\r\n    return <div>\r\n        <Field placeholder={placeholder} name={name}\r\n            validate={validators} component={component} {...props}\r\n        /> {text}\r\n    </div>\r\n}\r\nexport type GetStringKeys<T> = Extract<keyof T, string>","import React from 'react'\r\n\r\nexport type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n    if (value) return undefined\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}","import React from 'react'\r\nimport { InjectedFormProps, reduxForm } from \"redux-form\"\r\nimport { maxLengthCreator, required } from \"../../utils/validator/validator\"\r\nimport { createField, Input } from \"../common/FormsControls/FormsControls\"\r\nimport s from '../common/FormsControls/FormsControls.module.css'\r\n\r\nconst maxLength30 = maxLengthCreator(30)\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<LogiFormValueType, LoginFormOwnProps, string> & LoginFormOwnProps> = ({ handleSubmit, error, captchaUrl, captcha }) => {\r\n    if (captchaUrl === undefined) {\r\n        captcha()\r\n    }\r\n    return (\r\n\r\n        <form onSubmit={handleSubmit}>\r\n\r\n            {createField<LoginFormValueTypeKeys>('Email', 'email', [required], Input)}\r\n\r\n            {createField<LoginFormValueTypeKeys>('Password', 'password', [required, maxLength30], Input, { type: 'password' })}\r\n\r\n            {createField<LoginFormValueTypeKeys>(undefined, 'rememberMe', [], Input, { type: 'checkbox' }, 'remember me')}\r\n\r\n            {<img className={s.captcha} src={captchaUrl} />}\r\n            {captchaUrl && createField<LoginFormValueTypeKeys>('i am not robot', 'captcha', [required], Input)}\r\n\r\n            {error && <div className={s.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <button>login</button>\r\n            </div>\r\n\r\n        </form>\r\n    )\r\n}\r\nexport const LoginReduxForm = reduxForm<LogiFormValueType, LoginFormOwnProps>({ form: 'login' })(LoginForm)\r\n\r\nexport type LogiFormValueType = {\r\n    email: string \r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\ntype LoginFormValueTypeKeys = Extract<keyof LogiFormValueType, string>\r\ntype LoginFormOwnProps = {\r\n    captchaUrl: string | undefined\r\n    captcha: () => void\r\n}\r\n","import React, { FC } from 'react'\r\nimport { login, getCaptchaUrl } from '../../redux/auth-reducer'\r\nimport {connect, useDispatch, useSelector} from 'react-redux'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { AppStateType } from '../../redux/redux-store'\r\nimport { LoginReduxForm } from './LoginForm'\r\n\r\ntype LoginPropsType = {}\r\n\r\nconst Login: FC<LoginPropsType> = () => {\r\n\r\n    const isAuth = useSelector((state: any) => state.auth.isAuth)\r\n    const captchaUrl = useSelector((state: any) => state.auth.captchaUrl)\r\n    const dispatch = useDispatch()\r\n    const login = (email: string, password: string, rememberMe: boolean, captcha:string) => {\r\n        dispatch(login(email, password, rememberMe, captcha))\r\n    }\r\n    const getCaptchaUrl = () => {\r\n        dispatch(getCaptchaUrl())\r\n    }\r\n    const isLogin = (loginData: LogiFormValueType) => {\r\n        login(loginData.email, loginData.password, loginData.rememberMe, loginData.captcha)\r\n    }\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={'/dialogs'} />\r\n    }\r\n    return <div>\r\n\r\n        <h2>LOGIN</h2>\r\n        <LoginReduxForm onSubmit={isLogin} captchaUrl={captchaUrl} captcha={getCaptchaUrl} />\r\n\r\n\r\n    </div>\r\n}\r\nexport default Login\r\n// const mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n//     isAuth: state.auth.isAuth,\r\n//     captchaUrl: state.auth.captchaUrl\r\n// })\r\n//\r\n// export default connect(mapStateToProps, { login, getCaptchaUrl })(Login)\r\n//\r\n//\r\n// type MapStatePropsType = {\r\n//     isAuth: boolean\r\n//     captchaUrl: string | undefined\r\n// }\r\n// type MapDispatchPropsType = {\r\n//     login: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n//     getCaptchaUrl: () => void\r\n// }\r\n//\r\n// type LoginPropsType = MapStatePropsType & MapDispatchPropsType\r\n//\r\ntype LogiFormValueType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\n// type LoginFormValueTypeKeys = Extract<keyof LogiFormValueType, string>\r\n"],"sourceRoot":""}